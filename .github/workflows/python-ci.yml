name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: "0 15 * * 0"

permissions:
  contents: read

env:
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: # for EnricoMi/publish-unit-test-result-action
      checks: write
      pull-requests: write # for comment_mode
      contents: read # only for private repository
      issues: read # only for private repository
    strategy:
      matrix:
        python-version: [3.8]
        poetry-version: [1.1.11]
    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Setup python environment
        uses: actions/setup-python@d09bd5e6005b175076f227b13d9730d56e9dcfcb # v4.0.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup poetry environment
        uses: snok/install-poetry@2bf112a0f6979928eb6b011f39700db589c5961e # v1.3.1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache dependencies
        uses: actions/cache@c3f1317a9e7b1ef106c153ac8c0f00fed3ddbc0d # v3.0.4
        id: poetry_cache_id
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          # TODO: restore-key ?

      - name: Install dependencies
        if: steps.poetry_cache_id.outputs.cache-hit != 'true'
        shell: bash
        run: poetry install

      - name: Lint python code by flake8
        continue-on-error: true
        run: |
          poetry run flake8 src/ tests/ --format junit-xml --output-file report.xml
          poetry run flake8 src/ tests/ --format html --htmldir=flake8

      - name: Publish flake8 report to PR
        uses: EnricoMi/publish-unit-test-result-action@f00bb47e1d89c6d98071d1b69e16a2b63c7fbfc1 # v1.39
        with:
          check_name: flake8 results
          files: report.xml

      - name: Upload flake8 report to artifact
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
        with:
          name: flake8-report
          path: flake8/

      - name: Test python code by pytest
        continue-on-error: true
        run: |
          poetry run pytest

      - name: Publish pytest report to PR
        uses: EnricoMi/publish-unit-test-result-action@f00bb47e1d89c6d98071d1b69e16a2b63c7fbfc1 # v1.39
        with:
          check_name: pytest results
          files: report.xml

      - name: Upload pytest report to artifact
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
        with:
          name: pytest-report
          path: htmlcov/

  dockerize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Setup QEMU environment
        uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # v2.0.0

      - name: Setup buildx environment
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0

      - name: Build container
        id: build
        uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8 # v3.0.0
        with:
          tags: ${{ env.IMAGE_NAME }}:alpha
          context: .
          outputs: type=docker,dest=/tmp/myimage.tar

      - name: Upload container image to artifact
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
        with:
          name: myimage
          path: /tmp/myimage.tar
          retention-days: 1

  trivy:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    needs: dockerize
    steps:
      - name: Setup buildx environment
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0

      - name: Download container image from artifact
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
        with:
          name: myimage
          path: /tmp

      - name: Load container image
        run: docker load --input /tmp/myimage.tar

      - name: Scan container image by trivy
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe # v0.5.0
        with:
          image-ref: "${{ env.IMAGE_NAME }}:alpha"
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"

      - name: Publish trivy report to GitHub Security
        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26
        with:
          sarif_file: "trivy-results.sarif"

  anchore-image:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    needs: dockerize
    steps:
      - name: Setup buildx environment
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0

      - name: Download container image from artifact
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
        with:
          name: myimage
          path: /tmp

      - name: Load container image
        run: docker load --input /tmp/myimage.tar

      - name: Scan container image by anchore
        id: anchore-image
        uses: anchore/scan-action@ecfd0e98932e57ea8f68f29c4f418fc41a8194db # v3.2.5
        with:
          image: "${{ env.IMAGE_NAME }}:alpha"
          severity-cutoff: low
          fail-build: false
          acs-report-enable: true

      - name: Publish anchore report to GitHub Security
        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26
        with:
          sarif_file: ${{ steps.anchore-image.outputs.sarif }}

  anchore-files:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Scan Dockerfile by anchore
        id: anchore-files
        uses: anchore/scan-action@ecfd0e98932e57ea8f68f29c4f418fc41a8194db # v3.2.5
        with:
          path: "."
          severity-cutoff: low
          fail-build: false
          acs-report-enable: true

      - name: Publish anchore report to GitHub Security
        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26
        with:
          sarif_file: ${{ steps.anchore-files.outputs.sarif }}

  hadolint:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Scan Dockerfile by hadolint
        uses: hadolint/hadolint-action@f988afea3da57ee48710a9795b6bb677cc901183 # v2.1.0
        with:
          recursive: true
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Publish hadolint report to GitHub Security
        uses: github/codeql-action/upload-sarif@5f532563584d71fdef14ee64d17bafb34f751ce5 # v1.0.26
        with:
          sarif_file: hadolint-results.sarif
          wait-for-processing: true
