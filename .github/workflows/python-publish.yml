name: Publish

on:
  workflow_dispatch:
  push:
    tags:
      - v*.*.*

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Setup python environment
        uses: actions/setup-python@d09bd5e6005b175076f227b13d9730d56e9dcfcb # v4.0.0
        with:
          python-version: 3.8

      - name: Setup poetry environment
        uses: snok/install-poetry@2bf112a0f6979928eb6b011f39700db589c5961e # v1.3.1
        with:
          version: 1.1.11
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache dependencies
        uses: actions/cache@c3f1317a9e7b1ef106c153ac8c0f00fed3ddbc0d # v3.0.4
        id: poetry_cache_id
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.poetry_cache_id.outputs.cache-hit != 'true'
        shell: bash
        run: poetry install

      - name: Generate package SBOM
        run: poetry run sbom

      - name: Build package
        run: poetry build

      - name: Upload package to artifact
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
        with:
          name: package
          path: dist/

  dockerize:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@7e0881f8fe90b25e305bbf0309761e9314607e25
        with:
          cosign-release: "v1.9.0"

      - name: Setup QEMU environment
        uses: docker/setup-qemu-action@8b122486cedac8393e77aa9734c3528886e4a1a8 # v2.0.0

      - name: Setup buildx environment
        uses: docker/setup-buildx-action@dc7b9719a96d48369863986a06765841d7ea23f6 # v2.0.0

      - name: Login to registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract container metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push container
        id: build-and-push
        uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8 # v3.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

      - name: Sign container
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

      - name: Generate container SBOM
        uses: anchore/sbom-action@bb716408e75840bbb01e839347cd213767269d4a # v0.11.0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}
          format: spdx-json
          artifact-name: sbom.spdx.json

      - name: Publish container SBOM to registry
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign attach sbom --sbom sbom.spdx.json ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

  pages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Setup python environment
        uses: actions/setup-python@d09bd5e6005b175076f227b13d9730d56e9dcfcb # v4.0.0
        with:
          python-version: 3.8

      - name: Setup poetry environment
        uses: snok/install-poetry@2bf112a0f6979928eb6b011f39700db589c5961e # v1.3.1
        with:
          version: 1.1.11
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache dependencies
        uses: actions/cache@c3f1317a9e7b1ef106c153ac8c0f00fed3ddbc0d # v3.0.4
        id: poetry_cache_id
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          # TODO: restore-key ?

      - name: Install dependencies
        if: steps.poetry_cache_id.outputs.cache-hit != 'true'
        shell: bash
        run: poetry install

      - name: Generate sphinx
        run: poetry run sphinx

      - name: Publish API document to GitHub pages
        uses: crazy-max/ghaction-github-pages@eb08c35b9fab86751edfff4e55cd5cde35ff0e52 # v3.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          target_branch: gh-pages
          build_dir: public/
